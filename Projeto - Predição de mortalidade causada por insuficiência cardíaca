{"cells":[{"cell_type":"markdown","metadata":{"id":"Wv3o3lFW_NFA"},"source":["## Projeto - Predição de mortalidade causada por insuficiência cardíaca"]},{"cell_type":"markdown","metadata":{"id":"GTPAQ_Vu_wYi"},"source":["# Importações, criação do DataFrame e definição de funções"]},{"cell_type":"code","execution_count":158,"metadata":{"executionInfo":{"elapsed":311,"status":"ok","timestamp":1647987351143,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"9jnGCph0ktVo"},"outputs":[],"source":["import pandas as pd\n","import missingno as msno\n","import seaborn as sns\n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","from sklearn.metrics import confusion_matrix, precision_recall_curve, roc_auc_score, roc_curve, classification_report, mean_squared_error\n","\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import StratifiedKFold, KFold, cross_val_score, GridSearchCV, cross_val_predict\n","import seaborn as sns\n","\n","from sklearn.neural_network import  MLPClassifier"]},{"cell_type":"code","execution_count":159,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1647987351614,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"TTRds3whMvDV"},"outputs":[],"source":["# from google.colab import drive\n","# drive.mount('/content/gdrive',force_remount=True)\n","import os\n","os.chdir(\"/content/gdrive/\")"]},{"cell_type":"markdown","metadata":{"id":"F5SKsyq8_8WN"},"source":["Criando DataFrame com os dados disponibilizados"]},{"cell_type":"code","execution_count":160,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1647987351615,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"Z26ah3P8esTa"},"outputs":[],"source":["df = pd.read_csv('My Drive/dataset_insuficiencia_cardiaca.csv')"]},{"cell_type":"code","source":["%matplotlib inline"],"metadata":{"id":"oTIT_crlbTpL","executionInfo":{"status":"ok","timestamp":1647987351615,"user_tz":180,"elapsed":11,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}}},"execution_count":161,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yEvvE9YakfB0"},"source":["Definindo Funções para Análise exploratória"]},{"cell_type":"markdown","metadata":{"id":"beAO59BppYMl"},"source":["Plotagem de gráficos em histogramas e gráfico pizza"]},{"cell_type":"code","execution_count":162,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1647987351616,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"2rbsxYdekhSi"},"outputs":[],"source":["def histogram(data, x, y, title, quantidade_colunas):\n","    \n","    plt.title(title)\n","    plt.xlabel(x)\n","    plt.ylabel(y)\n","    plt.hist(data, bins = quantidade_colunas, rwidth=0.9, edgecolor='black')\n","    ax = plt.gca()\n","    plt.show()\n","    plt.close()"]},{"cell_type":"code","execution_count":163,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1647987351617,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"8GWUbpmqkiv4"},"outputs":[],"source":["def pie(data, title):\n","\n","  contagem_zero = 0\n","  contagem_um = 0\n","\n","  labels = '0', '1'\n","\n","  for i in data:\n","    if i == 0:\n","      contagem_zero+=1\n","    elif i == 1:\n","      contagem_um+=1\n","\n","  plt.pie([contagem_zero, contagem_um],labels=labels,autopct='%1.1f%%')\n","  plt.title(title)\n","  plt.axis('equal')\n","  plt.show()\n","  plt.close()"]},{"cell_type":"markdown","metadata":{"id":"bPwxr6KTq1DY"},"source":["Função que printa a média, mediana, valor máximo e valor mínimo"]},{"cell_type":"code","execution_count":164,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1647987351617,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"M2Hyq0pJkn90"},"outputs":[],"source":["def statistic(data):\n","  print(\"Mean: \" + str(data.mean()))\n","  print(\"Median: \" + str(data.median()))\n","  print(\"Max: \"+ str(data.max()))\n","  print(\"Min: \"+ str(data.min()))\n","  print()"]},{"cell_type":"markdown","source":["Função que exibe a acurácia e intervalo da acurácia"],"metadata":{"id":"EmkbvxKJV1wS"}},{"cell_type":"code","source":["def intervalo(results):\n","    mean = results.mean()\n","    dv = results.std()\n","    print('Acurácia média: {:.2f}%'.format(mean*100))\n","    print('Intervalo de acurácia: [{:.2f}% ~ {:.2f}%]'\n","           .format((mean - 2*dv)*100, (mean + 2*dv)*100))"],"metadata":{"id":"pM44_adEf2s1","executionInfo":{"status":"ok","timestamp":1647987351618,"user_tz":180,"elapsed":11,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}}},"execution_count":165,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eea6EY3HksWg"},"source":["# Análise Exploratória"]},{"cell_type":"code","execution_count":166,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":398,"status":"ok","timestamp":1647987352006,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"ZkUCbvjsuVr7","outputId":"0d6f5efe-b517-448e-eebf-dee8c46c7608"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n","0    75.0        0                       582         0                 20   \n","1    55.0        0                      7861         0                 38   \n","2    65.0        0                       146         0                 20   \n","3    50.0        1                       111         0                 20   \n","4    65.0        1                       160         1                 20   \n","..    ...      ...                       ...       ...                ...   \n","294  62.0        0                        61         1                 38   \n","295  55.0        0                      1820         0                 38   \n","296  45.0        0                      2060         1                 60   \n","297  45.0        0                      2413         0                 38   \n","298  50.0        0                       196         0                 45   \n","\n","     high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n","0                      1  265000.00               1.9           130    1   \n","1                      0  263358.03               1.1           136    1   \n","2                      0  162000.00               1.3           129    1   \n","3                      0  210000.00               1.9           137    1   \n","4                      0  327000.00               2.7           116    0   \n","..                   ...        ...               ...           ...  ...   \n","294                    1  155000.00               1.1           143    1   \n","295                    0  270000.00               1.2           139    0   \n","296                    0  742000.00               0.8           138    0   \n","297                    0  140000.00               1.4           140    1   \n","298                    0  395000.00               1.6           136    1   \n","\n","     smoking  time  DEATH_EVENT  \n","0          0     4            1  \n","1          0     6            1  \n","2          1     7            1  \n","3          0     7            1  \n","4          0     8            1  \n","..       ...   ...          ...  \n","294        1   270            0  \n","295        0   271            0  \n","296        0   278            0  \n","297        1   280            0  \n","298        1   285            0  \n","\n","[299 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-3cccac5c-a44d-4048-8f31-5c7eb4e6f9c6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>DEATH_EVENT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>582</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>265000.00</td>\n","      <td>1.9</td>\n","      <td>130</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>55.0</td>\n","      <td>0</td>\n","      <td>7861</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>263358.03</td>\n","      <td>1.1</td>\n","      <td>136</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>65.0</td>\n","      <td>0</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>162000.00</td>\n","      <td>1.3</td>\n","      <td>129</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1</td>\n","      <td>111</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>210000.00</td>\n","      <td>1.9</td>\n","      <td>137</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>65.0</td>\n","      <td>1</td>\n","      <td>160</td>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>327000.00</td>\n","      <td>2.7</td>\n","      <td>116</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>61</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>1</td>\n","      <td>155000.00</td>\n","      <td>1.1</td>\n","      <td>143</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>270</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>55.0</td>\n","      <td>0</td>\n","      <td>1820</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>270000.00</td>\n","      <td>1.2</td>\n","      <td>139</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>271</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>296</th>\n","      <td>45.0</td>\n","      <td>0</td>\n","      <td>2060</td>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>0</td>\n","      <td>742000.00</td>\n","      <td>0.8</td>\n","      <td>138</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>278</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>45.0</td>\n","      <td>0</td>\n","      <td>2413</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>140000.00</td>\n","      <td>1.4</td>\n","      <td>140</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>280</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>298</th>\n","      <td>50.0</td>\n","      <td>0</td>\n","      <td>196</td>\n","      <td>0</td>\n","      <td>45</td>\n","      <td>0</td>\n","      <td>395000.00</td>\n","      <td>1.6</td>\n","      <td>136</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>285</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>299 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cccac5c-a44d-4048-8f31-5c7eb4e6f9c6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3cccac5c-a44d-4048-8f31-5c7eb4e6f9c6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3cccac5c-a44d-4048-8f31-5c7eb4e6f9c6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":166}],"source":["df"]},{"cell_type":"markdown","metadata":{"id":"d68LRkFIuXnm"},"source":["Tamanho do dataframe"]},{"cell_type":"code","execution_count":167,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1647987352007,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"LCfZZqs6udVi","outputId":"9ae4ab5b-189c-4506-fd1b-68f232de58c7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(299, 13)"]},"metadata":{},"execution_count":167}],"source":["df.shape"]},{"cell_type":"markdown","metadata":{"id":"FO2bDJ19vrsO"},"source":["Informações estatísticas sobre os dados"]},{"cell_type":"code","execution_count":168,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1647987352008,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"gC0Y-3Vrvmpv","outputId":"228476f5-b021-4c97-af7e-4d9d5478aa2e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              age     anaemia  creatinine_phosphokinase    diabetes  \\\n","count  299.000000  299.000000                299.000000  299.000000   \n","mean    60.833893    0.431438                581.839465    0.418060   \n","std     11.894809    0.496107                970.287881    0.494067   \n","min     40.000000    0.000000                 23.000000    0.000000   \n","25%     51.000000    0.000000                116.500000    0.000000   \n","50%     60.000000    0.000000                250.000000    0.000000   \n","75%     70.000000    1.000000                582.000000    1.000000   \n","max     95.000000    1.000000               7861.000000    1.000000   \n","\n","       ejection_fraction  high_blood_pressure      platelets  \\\n","count         299.000000           299.000000     299.000000   \n","mean           38.083612             0.351171  263358.029264   \n","std            11.834841             0.478136   97804.236869   \n","min            14.000000             0.000000   25100.000000   \n","25%            30.000000             0.000000  212500.000000   \n","50%            38.000000             0.000000  262000.000000   \n","75%            45.000000             1.000000  303500.000000   \n","max            80.000000             1.000000  850000.000000   \n","\n","       serum_creatinine  serum_sodium         sex    smoking        time  \\\n","count         299.00000    299.000000  299.000000  299.00000  299.000000   \n","mean            1.39388    136.625418    0.648829    0.32107  130.260870   \n","std             1.03451      4.412477    0.478136    0.46767   77.614208   \n","min             0.50000    113.000000    0.000000    0.00000    4.000000   \n","25%             0.90000    134.000000    0.000000    0.00000   73.000000   \n","50%             1.10000    137.000000    1.000000    0.00000  115.000000   \n","75%             1.40000    140.000000    1.000000    1.00000  203.000000   \n","max             9.40000    148.000000    1.000000    1.00000  285.000000   \n","\n","       DEATH_EVENT  \n","count    299.00000  \n","mean       0.32107  \n","std        0.46767  \n","min        0.00000  \n","25%        0.00000  \n","50%        0.00000  \n","75%        1.00000  \n","max        1.00000  "],"text/html":["\n","  <div id=\"df-f6d1cd72-fe2b-4a45-a6b7-e4e1b5770988\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>DEATH_EVENT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>60.833893</td>\n","      <td>0.431438</td>\n","      <td>581.839465</td>\n","      <td>0.418060</td>\n","      <td>38.083612</td>\n","      <td>0.351171</td>\n","      <td>263358.029264</td>\n","      <td>1.39388</td>\n","      <td>136.625418</td>\n","      <td>0.648829</td>\n","      <td>0.32107</td>\n","      <td>130.260870</td>\n","      <td>0.32107</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>11.894809</td>\n","      <td>0.496107</td>\n","      <td>970.287881</td>\n","      <td>0.494067</td>\n","      <td>11.834841</td>\n","      <td>0.478136</td>\n","      <td>97804.236869</td>\n","      <td>1.03451</td>\n","      <td>4.412477</td>\n","      <td>0.478136</td>\n","      <td>0.46767</td>\n","      <td>77.614208</td>\n","      <td>0.46767</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>40.000000</td>\n","      <td>0.000000</td>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>14.000000</td>\n","      <td>0.000000</td>\n","      <td>25100.000000</td>\n","      <td>0.50000</td>\n","      <td>113.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>4.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>51.000000</td>\n","      <td>0.000000</td>\n","      <td>116.500000</td>\n","      <td>0.000000</td>\n","      <td>30.000000</td>\n","      <td>0.000000</td>\n","      <td>212500.000000</td>\n","      <td>0.90000</td>\n","      <td>134.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>73.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>60.000000</td>\n","      <td>0.000000</td>\n","      <td>250.000000</td>\n","      <td>0.000000</td>\n","      <td>38.000000</td>\n","      <td>0.000000</td>\n","      <td>262000.000000</td>\n","      <td>1.10000</td>\n","      <td>137.000000</td>\n","      <td>1.000000</td>\n","      <td>0.00000</td>\n","      <td>115.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>70.000000</td>\n","      <td>1.000000</td>\n","      <td>582.000000</td>\n","      <td>1.000000</td>\n","      <td>45.000000</td>\n","      <td>1.000000</td>\n","      <td>303500.000000</td>\n","      <td>1.40000</td>\n","      <td>140.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>203.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>1.000000</td>\n","      <td>7861.000000</td>\n","      <td>1.000000</td>\n","      <td>80.000000</td>\n","      <td>1.000000</td>\n","      <td>850000.000000</td>\n","      <td>9.40000</td>\n","      <td>148.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>285.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6d1cd72-fe2b-4a45-a6b7-e4e1b5770988')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f6d1cd72-fe2b-4a45-a6b7-e4e1b5770988 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f6d1cd72-fe2b-4a45-a6b7-e4e1b5770988');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":168}],"source":["df.describe()"]},{"cell_type":"markdown","metadata":{"id":"LUDgWBb2rDCY"},"source":["## Variáveis"]},{"cell_type":"markdown","metadata":{"id":"_Oopcj1cvbJV"},"source":["\n","\n","- **age - idade:** idade do paciente (anos)\n","- **anemia - anemia:** diminuição dos glóbulos vermelhos ou da hemoglobina (booleana)\n","- **high blood pressure - pressão alta:** se o paciente tiver hipertensão (booleana)\n","- **creatinine phosphokinaes (CPK) - creatinina fosfoquinase (CPK):** nível da enzima CPK no sangue (mcg/L)\n","- **diabetes - diabetes:** se o paciente tem diabetes (booleano)\n","- **ejection fraction - fração de ejeção:** porcentagem de sangue que sai do coração a cada contração (porcentagem)\n","- **platelets - plaquetas:** plaquetas no sangue (quiloplaquetas/mL)\n","- **sex - sexo:** mulher ou homem (binário)\n","- **serum creatinine - creatinina sérica:** nível de creatinina sérica no sangue (mg/dL)\n","- **serum sodium - sódio sérico:** nível de sódio sérico no sangue (mEq/L)\n","- **smoking - tabagismo:** se o paciente fuma ou não (booleano)\n","- **time - tempo:** período de acompanhamento (dias)\n","- **DEATH_EVENT - evento de óbito:** se o paciente faleceu durante o período de acompanhamento (booleano)"]},{"cell_type":"markdown","metadata":{"id":"bu9oDGH4sZRH"},"source":["### age"]},{"cell_type":"code","execution_count":169,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1647987352008,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"eKJlFnGGsarS","outputId":"da5b43d4-c193-46a9-af92-72b5170ccbab"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 60.83389297658862\n","Median: 60.0\n","Max: 95.0\n","Min: 40.0\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['age'])\n","histogram(df['age'], 'age', 'Frequência', 'Histograma - Age', 47)"]},{"cell_type":"markdown","metadata":{"id":"6v9eLpLhscZB"},"source":["### anaemia"]},{"cell_type":"code","execution_count":170,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":541,"status":"ok","timestamp":1647987352534,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"2QCZIb3xshut","outputId":"76bddd1e-0d2e-45cd-d88e-02dc53a10fef"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['anaemia'],'Gráfico Pizza - anaemia')"]},{"cell_type":"markdown","metadata":{"id":"ALpXOa5SskP0"},"source":["### creatinine_phosphokinase"]},{"cell_type":"code","execution_count":171,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1647987352535,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"QmDYCUuEsnm-","outputId":"4e9a8846-6007-4884-bd37-42dac62675f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 581.8394648829432\n","Median: 250.0\n","Max: 7861\n","Min: 23\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['creatinine_phosphokinase'])\n","histogram(df['creatinine_phosphokinase'], 'creatinine_phosphokinase', 'Frequência', 'Histograma - creatinine_phosphokinase', 50)"]},{"cell_type":"markdown","metadata":{"id":"W2DTK0hesozL"},"source":["### diabetes"]},{"cell_type":"code","execution_count":172,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1647987353131,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"HKqEeOX0sq5Q","outputId":"2335c009-0efb-4854-f950-8e51235c8b4c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['diabetes'],'Gráfico Pizza - diabetes')"]},{"cell_type":"markdown","metadata":{"id":"g7Qn4iNHssCp"},"source":["### ejection_fraction"]},{"cell_type":"code","execution_count":173,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1647987353134,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"acxZ-loesuor","outputId":"b6617934-55c1-483f-d54a-16a944ddbddf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 38.08361204013378\n","Median: 38.0\n","Max: 80\n","Min: 14\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['ejection_fraction'])\n","histogram(df['ejection_fraction'], 'ejection_fraction', 'Frequência', 'Histograma - ejection_fraction', 17)"]},{"cell_type":"markdown","metadata":{"id":"8JCWd2iDswPu"},"source":["### high_blood_pressure"]},{"cell_type":"code","execution_count":174,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1647987353135,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"-Xq99kKvsynX","outputId":"3216c2f5-e122-4279-9abb-19af263ad039"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['high_blood_pressure'],'Gráfico Pizza - high_blood_pressure')"]},{"cell_type":"markdown","metadata":{"id":"FBA2_3mzs0Z_"},"source":["### platelets"]},{"cell_type":"code","execution_count":175,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":623,"status":"ok","timestamp":1647987353730,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"WEj_RoGMtYka","outputId":"9cfd25ac-4943-4502-b35c-72ce7255eff5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 263358.02926421416\n","Median: 262000.0\n","Max: 850000.0\n","Min: 25100.0\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['platelets'])\n","histogram(df['platelets'], 'platelets', 'Frequência', 'Histograma - platelets', 50)"]},{"cell_type":"markdown","metadata":{"id":"Iz2fTQS6ta6q"},"source":["### serum_creatinine"]},{"cell_type":"code","execution_count":176,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1647987353732,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"joGoXGd_tdur","outputId":"25dd8094-25ca-4d40-e9e8-c1a706474e15"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 1.393879598662207\n","Median: 1.1\n","Max: 9.4\n","Min: 0.5\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['serum_creatinine'])\n","histogram(df['serum_creatinine'], 'serum_creatinine', 'Frequência', 'Histograma - serum_creatinine', 40)"]},{"cell_type":"markdown","metadata":{"id":"EyAXUzRjtf2K"},"source":["### serum_sodium"]},{"cell_type":"code","execution_count":177,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1647987353734,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"OMjacUc1tgrQ","outputId":"f5945db7-8b18-4bf0-9a39-15c5d3d20e45"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 136.62541806020067\n","Median: 137.0\n","Max: 148\n","Min: 113\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['serum_sodium'])\n","histogram(df['serum_sodium'], 'serum_sodium', 'Frequência', 'Histograma - serum_sodium', 27)"]},{"cell_type":"markdown","metadata":{"id":"VKt7aEQ3th-m"},"source":["### sex"]},{"cell_type":"code","execution_count":178,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":39,"status":"ok","timestamp":1647987353736,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"a4U5u3LStj2w","outputId":"ca55eda3-9401-446c-c6d5-495af9f952e4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['sex'],'Gráfico Pizza - sex')"]},{"cell_type":"markdown","metadata":{"id":"-9iIn2z0tloe"},"source":["### smoking"]},{"cell_type":"code","execution_count":179,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":38,"status":"ok","timestamp":1647987353738,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"Lh44Q5KutnqU","outputId":"08307b43-9f51-4474-a4ae-cb8c34e1356c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['smoking'],'Gráfico Pizza - smoking')"]},{"cell_type":"markdown","metadata":{"id":"f9b1xInTtotJ"},"source":["### time"]},{"cell_type":"code","execution_count":180,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":555,"status":"ok","timestamp":1647987354258,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"H0BcGcOTtqtV","outputId":"815652c9-3fd1-42ba-d176-13b4bce92abf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean: 130.2608695652174\n","Median: 115.0\n","Max: 285\n","Min: 4\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["statistic(df['time'])\n","histogram(df['time'], 'time', 'Frequência', 'Histograma - time', 50)"]},{"cell_type":"markdown","metadata":{"id":"VOlqPukMtssv"},"source":["### DEATH_EVENT"]},{"cell_type":"code","execution_count":181,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1647987354259,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"O5eJ76witt3O","outputId":"3f7d33e1-a878-47f2-d470-466b352d81d6"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["pie(df['DEATH_EVENT'],'Gráfico Pizza - DEATH_EVENT')"]},{"cell_type":"markdown","metadata":{"id":"rQKrMSGAtyyI"},"source":["## Correlação dos dados"]},{"cell_type":"markdown","metadata":{"id":"8f6eYoAF0EJq"},"source":["A análise de correlação é uma forma descritiva que mede se há e qual o grau de dependência entre variáveis, em outras palavras, o quanto a variável interfere na outra. Esse grau de relação é medido através de coeficientes. Abaixo utilizaremos o coeficiente de Pearson.\n","\n","O coeficiente de Pearson, mede o grau de correlação através do cálculo de direção positiva ou negativa. Normalmente esse coeficiente é representado por valores entre -1 e 1."]},{"cell_type":"markdown","metadata":{"id":"OGZF80c3t5PF"},"source":["**0,9 a 1 (positivo ou negativo):** correlação muito forte;\n","\n","**0,7 a 09 (positivo ou negativo):** correlação forte;\n","\n","**0,5 a 0,7 (positivo ou negativo):** correlação moderada;\n","\n","**0,3 a 0,5 (positivo ou negativo):** correlação fraca;\n","\n","**0 a 0,3 (positivo ou negativo):** não possui correlação."]},{"cell_type":"code","execution_count":182,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":1273,"status":"ok","timestamp":1647987355523,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"l9ATXbvCt9iX","outputId":"2cfae7af-0cdb-4b18-ccad-1c66133b9065"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f0b4e406d90>"]},"metadata":{},"execution_count":182},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["correlations = df.corr()\n","plot = sns.heatmap(correlations, annot = True, fmt=\".1f\", linewidths=.6)\n","plot"]},{"cell_type":"markdown","metadata":{"id":"HrUsofZ2t_HG"},"source":["Analisando a correlação dos dados, temos:\n","\n","**smoking** com **sex** (correlação fraca)\n","\n","**time** com **DEATH_EVENT** (correlação moderada)\n"]},{"cell_type":"markdown","metadata":{"id":"T9hlxvDePe3Q"},"source":["# Pré-processamento dos dados"]},{"cell_type":"markdown","metadata":{"id":"E9AU5CXkn2QC"},"source":["## Transformação de Variáveis"]},{"cell_type":"code","execution_count":183,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1647987355525,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"IFYOAeqqnhHQ","outputId":"d0083234-7310-41cd-9f70-f1fd695d434c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                         float64\n","anaemia                       int64\n","creatinine_phosphokinase      int64\n","diabetes                      int64\n","ejection_fraction             int64\n","high_blood_pressure           int64\n","platelets                   float64\n","serum_creatinine            float64\n","serum_sodium                  int64\n","sex                           int64\n","smoking                       int64\n","time                          int64\n","DEATH_EVENT                   int64\n","dtype: object"]},"metadata":{},"execution_count":183}],"source":["df.dtypes"]},{"cell_type":"markdown","metadata":{"id":"IXmQgBe2voYw"},"source":["Iremos tranformar a coluna \"age\" em inteiro, pois as idades devem ser sempre inteiras."]},{"cell_type":"code","execution_count":184,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1647987355526,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"CdGCXybPreb7","outputId":"aed86526-3c85-4777-df47-f939c27eef48"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      75.0\n","1      55.0\n","2      65.0\n","3      50.0\n","4      65.0\n","       ... \n","294    62.0\n","295    55.0\n","296    45.0\n","297    45.0\n","298    50.0\n","Name: age, Length: 299, dtype: float64"]},"metadata":{},"execution_count":184}],"source":["df['age']"]},{"cell_type":"code","execution_count":185,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1647987355527,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"sTULA-SAm-VY","outputId":"a299e488-3e7a-454b-98b5-17f5571a8930"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      75\n","1      55\n","2      65\n","3      50\n","4      65\n","       ..\n","294    62\n","295    55\n","296    45\n","297    45\n","298    50\n","Name: age, Length: 299, dtype: int64"]},"metadata":{},"execution_count":185}],"source":["df['age'] = df['age'].astype(int)\n","df['age']"]},{"cell_type":"markdown","metadata":{"id":"L5MktNQfrloh"},"source":["## Verificação de valores ausentes"]},{"cell_type":"markdown","metadata":{"id":"OayA3y9KwMfo"},"source":["Verificando se as variáveis possuem valores nulos"]},{"cell_type":"code","execution_count":186,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1647987355528,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"muNDGO5orqCh","outputId":"0ec181e7-d9e5-4fae-a537-b68937b6003f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                         0\n","anaemia                     0\n","creatinine_phosphokinase    0\n","diabetes                    0\n","ejection_fraction           0\n","high_blood_pressure         0\n","platelets                   0\n","serum_creatinine            0\n","serum_sodium                0\n","sex                         0\n","smoking                     0\n","time                        0\n","DEATH_EVENT                 0\n","dtype: int64"]},"metadata":{},"execution_count":186}],"source":["df.isnull().sum()"]},{"cell_type":"markdown","metadata":{"id":"nevRED5twPXK"},"source":["Plotaremos um gráfico para visualizar os valores nulos"]},{"cell_type":"code","execution_count":187,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":693,"status":"ok","timestamp":1647987356209,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"aZHfE8YPr2i4","outputId":"35c5c986-8d7c-45ea-eee5-b50bc09e23e2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f0b4e390590>"]},"metadata":{},"execution_count":187},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["msno.matrix(df)"]},{"cell_type":"markdown","metadata":{"id":"OHSXUl4xwhRr"},"source":["O Dataframe **NÃO** possui valores nulos"]},{"cell_type":"markdown","metadata":{"id":"EROcOyKXsRXV"},"source":["## Verificação de outliers"]},{"cell_type":"markdown","metadata":{"id":"5pqRb4Fxw_WM"},"source":["É importante entender os outliers, eles podem nos levar a um super ajuste do modelo, já que o algoritmo pode se apega a algumas especificidades relacionadas a esses valores, em vez da distribuição verdadeira."]},{"cell_type":"code","execution_count":188,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1647987356212,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"OY0Nx4PZvaEn","outputId":"2006037a-14eb-451f-eb00-3a2ef507daf8"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f0b4e10f3d0>"]},"metadata":{},"execution_count":188},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAWMAAAEHCAYAAAB7pyetAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATkElEQVR4nO3de5DdZX3H8c832Q0EUCALZTBRFroIXooIGQoqTooJZoO12mILtc3amkYTmwQYx5GaUbTbi0wHSzJVYNpK1ipSrLWg2WDCxcFL0Y0BEnI94irJyG0dRSOFXL794/eck9+enLObnJzL92zer5lMfuc5v/M8333Oyef89tnsc8zdBQBorUmtLgAAQBgDQAiEMQAEQBgDQACEMQAE0HE4J59yyine3d3doFIAYGJav379c+5+6ljnHFYYd3d3a2ho6MiqAoCjjJn9ZLxzWKYAgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAIYwAIgDAGgAAO6zPw6mXlypUqFAqj2nbt2iVJmj59+mH11dPToyVLltStNgBohZaEcaFQ0CObtmjfcdNKbZN/80tJ0lMvHnpJk3/z87rXBgCt0JIwlqR9x03TC+fOK92eunW1JI1qG0/xMQDQ7lgzBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAAmhLGK1eu1MqVK5sxVF21a90A2k9HMwYpFArNGKbu2rVuAO2HZQoACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAwBoAACGMACIAw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\n"},"metadata":{"needs_background":"light"}}],"source":["#Box-plot da coluna creatinine_phosphokinase\n","sns.boxplot(df['creatinine_phosphokinase'])"]},{"cell_type":"markdown","metadata":{"id":"j575bN7as0Cp"},"source":["## Normalização dos dados"]},{"cell_type":"markdown","metadata":{"id":"W2TTAPMvxccc"},"source":["As vezes alguns atributos possuem escala diferentes. Dessa forma utilizaremos a normalização para transformar os dados a fim de evitar que um atributo predomine sobre o outro.\n","\n","A normalização é uma das técnicas utilizadas para essa tranformação, e é recomendável usar quando os limites de valores dos atributos são muito diferentes.\n","\n","Utilizamos o escalonamento de recurso min-max, que redimensiona o recurso para o intervalo fixo de [0,1] subtraindo o valor mínimo do recurso e dividindo pelo intervalo."]},{"cell_type":"code","execution_count":189,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1647987356215,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"Kgj_y3tGs6_9","outputId":"a7e2abd1-23ee-4051-a464-70cad9009dcb"},"outputs":[{"output_type":"stream","name":"stdout","text":["     age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n","0     75        0                  0.071319         0                 20   \n","1     55        0                  1.000000         0                 38   \n","2     65        0                  0.015693         0                 20   \n","3     50        1                  0.011227         0                 20   \n","4     65        1                  0.017479         1                 20   \n","..   ...      ...                       ...       ...                ...   \n","294   62        0                  0.004848         1                 38   \n","295   55        0                  0.229268         0                 38   \n","296   45        0                  0.259888         1                 60   \n","297   45        0                  0.304925         0                 38   \n","298   50        0                  0.022072         0                 45   \n","\n","     high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n","0                      1  265000.00               1.9           130    1   \n","1                      0  263358.03               1.1           136    1   \n","2                      0  162000.00               1.3           129    1   \n","3                      0  210000.00               1.9           137    1   \n","4                      0  327000.00               2.7           116    0   \n","..                   ...        ...               ...           ...  ...   \n","294                    1  155000.00               1.1           143    1   \n","295                    0  270000.00               1.2           139    0   \n","296                    0  742000.00               0.8           138    0   \n","297                    0  140000.00               1.4           140    1   \n","298                    0  395000.00               1.6           136    1   \n","\n","     smoking  time  DEATH_EVENT  \n","0          0     4            1  \n","1          0     6            1  \n","2          1     7            1  \n","3          0     7            1  \n","4          0     8            1  \n","..       ...   ...          ...  \n","294        1   270            0  \n","295        0   271            0  \n","296        0   278            0  \n","297        1   280            0  \n","298        1   285            0  \n","\n","[299 rows x 13 columns]\n"]}],"source":["df_min_max_scaled = df.copy() \n","df_min_max_scaled['creatinine_phosphokinase'] = (df_min_max_scaled['creatinine_phosphokinase'] - df_min_max_scaled['creatinine_phosphokinase'].min()) / (df_min_max_scaled['creatinine_phosphokinase'].max() - df_min_max_scaled['creatinine_phosphokinase'].min())     \n","df = df_min_max_scaled\n","print(df)"]},{"cell_type":"markdown","metadata":{"id":"HN86Kyh1Prw3"},"source":["# Treinamento para ser utilizado pelos modelos"]},{"cell_type":"markdown","source":["Criando variáveis de Treino e Test"],"metadata":{"id":"WtEd7XQygQsk"}},{"cell_type":"code","execution_count":190,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1647987356216,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"netNi5EXPo3V"},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(df.drop('DEATH_EVENT',axis=1),df['DEATH_EVENT'],test_size=0.3)"]},{"cell_type":"markdown","metadata":{"id":"JBoWQbWEWRsi"},"source":["# Treinamento utilizando Random Forest"]},{"cell_type":"code","execution_count":191,"metadata":{"executionInfo":{"elapsed":319,"status":"ok","timestamp":1647987356518,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"tzXJ3az7VDJv"},"outputs":[],"source":["modelo_rf = RandomForestClassifier(n_estimators=300, max_depth = 3)\n","modelo_rf = modelo_rf.fit(X_train, y_train)"]},{"cell_type":"markdown","metadata":{"id":"QvKg8g3TFpw6"},"source":["Previsões"]},{"cell_type":"code","execution_count":192,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1647987356520,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"n8Q5eVlPFqSZ"},"outputs":[],"source":["y_previsao_rf = modelo_rf.predict(X_test)"]},{"cell_type":"markdown","metadata":{"id":"mM-BuSAbVd2S"},"source":["## Validação Cruzada"]},{"cell_type":"markdown","source":["Validação cruzada é uma técnica para avaliar os modelos de ML. Esta técnica é amplamente empregada em problemas onde o objetivo da modelagem é a predição. Busca-se então estimar o quão preciso é este modelo na prática, ou seja, o seu desempenho para um novo conjunto de dados."],"metadata":{"id":"0EtJbYAXguMB"}},{"cell_type":"markdown","metadata":{"id":"S204isCjVk5o"},"source":["cross_val_score"]},{"cell_type":"markdown","source":["O cross_val_score é uma função que executa a validação cruzada de acordo com o númeor de folders, informada através do parâmetro cv."],"metadata":{"id":"rYRKVCHAgerM"}},{"cell_type":"code","execution_count":193,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2808,"status":"ok","timestamp":1647987359322,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"INUOs5hiVpCL","outputId":"e004e1d6-cce6-49ed-f662-ea5a21555a66"},"outputs":[{"output_type":"stream","name":"stdout","text":["Acurácia média: 86.54%\n","Intervalo de acurácia: [72.22% ~ 100.86%]\n"]}],"source":["results = cross_val_score(modelo_rf , X_train, y_train, cv = 6, scoring = 'accuracy') # cv = 'folds'\n","intervalo(results)"]},{"cell_type":"markdown","source":["KFold"],"metadata":{"id":"38KC4mIOjYNi"}},{"cell_type":"markdown","source":["A ideia do KFold é retornar os indices de cada partição de maneira aleatória. Os indices são obtidos de acordo com o número de partições e são utilizados para construir-las a partir dos dados:"],"metadata":{"id":"CreLiRWvjZp0"}},{"cell_type":"code","source":["cv = KFold(n_splits = 5, shuffle = True)\n","results = cross_val_score(modelo_rf , X_train, y_train, cv = cv)\n","intervalo(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5CoTKLxwjqNN","executionInfo":{"status":"ok","timestamp":1647987361470,"user_tz":180,"elapsed":2161,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"c9ca02f4-9fc1-4328-8960-e45d105d2b3b"},"execution_count":194,"outputs":[{"output_type":"stream","name":"stdout","text":["Acurácia média: 84.66%\n","Intervalo de acurácia: [73.31% ~ 96.00%]\n"]}]},{"cell_type":"markdown","metadata":{"id":"c_nhUbZqV1HT"},"source":["StratifiedKFold"]},{"cell_type":"markdown","source":["É uma variação do KFold, ele balanceia a quantidade de amostras de cada classe entre as partições. O uso é basicamente o mesmo do KFold, porém precisamos do método n_splits."],"metadata":{"id":"_1n1uy0uinjg"}},{"cell_type":"code","execution_count":195,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2424,"status":"ok","timestamp":1647987363887,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"2YxJTdf5V98g","outputId":"9ec76599-32a2-47fa-f582-3750d8e23dbc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Acurácia média: 85.63%\n","Intervalo de acurácia: [81.18% ~ 90.08%]\n"]}],"source":["cv = StratifiedKFold(n_splits = 5, shuffle = True)\n","results = cross_val_score(modelo_rf , X_train, y_train, cv = cv)\n","intervalo(results)"]},{"cell_type":"markdown","source":["Comparando Previsão e teste com Random Forest"],"metadata":{"id":"crC29NERcvL2"}},{"cell_type":"code","source":["df_resultado = pd.DataFrame()\n","df_resultado['y_teste'] = y_test\n","df_resultado['y_previsao_rf'] = y_previsao_rf\n","df_resultado = df_resultado.reset_index(drop=True)\n","display(df_resultado)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"f71t_jCyc2md","executionInfo":{"status":"ok","timestamp":1647987363892,"user_tz":180,"elapsed":36,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"0b078b2e-0eec-40f3-85bf-fcdf46326ad8"},"execution_count":196,"outputs":[{"output_type":"display_data","data":{"text/plain":["    y_teste  y_previsao_rf\n","0         0              0\n","1         0              0\n","2         0              0\n","3         1              1\n","4         1              1\n","..      ...            ...\n","85        1              1\n","86        0              0\n","87        0              0\n","88        0              0\n","89        0              1\n","\n","[90 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-2249cda6-b68d-46f5-8b6b-33f8df60b5fc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_teste</th>\n","      <th>y_previsao_rf</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>90 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2249cda6-b68d-46f5-8b6b-33f8df60b5fc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2249cda6-b68d-46f5-8b6b-33f8df60b5fc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2249cda6-b68d-46f5-8b6b-33f8df60b5fc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"u4vNLTiZWlZk"},"source":["# Treinamento utilizando Rede Neural"]},{"cell_type":"code","execution_count":197,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1647987363893,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"vVjMwMA7Wr96","outputId":"d8fb0f3a-88ea-407a-9fb9-d55d358303b9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]}],"source":["modelo_rn = MLPClassifier(activation='identity', learning_rate='constant', max_iter=20, solver='lbfgs')\n","modelo_rn = modelo_rn.fit(X_train, y_train)"]},{"cell_type":"markdown","metadata":{"id":"sQsdqzHRFvtW"},"source":["Previsões"]},{"cell_type":"code","execution_count":198,"metadata":{"executionInfo":{"elapsed":28,"status":"ok","timestamp":1647987363895,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"45fhTdvUF0US"},"outputs":[],"source":["y_previsao_rn = modelo_rn.predict(X_test)"]},{"cell_type":"markdown","metadata":{"id":"zz6et68hZMJB"},"source":["## Validação Cruzada"]},{"cell_type":"markdown","metadata":{"id":"1gb0LVwBZlCC"},"source":["cross_val_score"]},{"cell_type":"code","execution_count":199,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":472,"status":"ok","timestamp":1647987364341,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"h-S5h0iSZPQs","outputId":"d4692c49-cb6f-4cb9-e116-eed91a088856"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"output_type":"stream","name":"stdout","text":["Acurácia média: 61.28%\n","Intervalo de acurácia: [30.95% ~ 91.61%]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]}],"source":["results = cross_val_score(modelo_rn, X_train,  y_train, cv = 5, scoring = 'accuracy')\n","intervalo(results)"]},{"cell_type":"markdown","source":["KFold"],"metadata":{"id":"KGJgJ_0fmQah"}},{"cell_type":"code","source":["cv = KFold(n_splits = 5, shuffle = True)\n","results = cross_val_score(modelo_rn, X_train, y_train, cv = cv)\n","intervalo(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dij-pfZOmQHM","executionInfo":{"status":"ok","timestamp":1647987364343,"user_tz":180,"elapsed":25,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"26184936-e48f-4ec1-9c01-80bb075501a2"},"execution_count":200,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"output_type":"stream","name":"stdout","text":["Acurácia média: 64.18%\n","Intervalo de acurácia: [32.35% ~ 96.01%]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]}]},{"cell_type":"markdown","metadata":{"id":"CHnmS1WEZnpX"},"source":["StratifiedKFold"]},{"cell_type":"code","execution_count":201,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":322,"status":"ok","timestamp":1647987364651,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"DLWScY88bU1m","outputId":"7e5c56b1-3e32-4031-8358-a1a44c4f024d"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"output_type":"stream","name":"stdout","text":["Acurácia média: 53.66%\n","Intervalo de acurácia: [16.58% ~ 90.74%]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]}],"source":["cv = StratifiedKFold(n_splits = 5, shuffle = True)\n","results = cross_val_score(modelo_rn, X_train,  y_train, cv = cv)\n","intervalo(results)"]},{"cell_type":"markdown","source":["Comparando Previsão e teste com Redes Neurais"],"metadata":{"id":"VSI1PO2qneKx"}},{"cell_type":"code","source":["df_resultado = pd.DataFrame()\n","df_resultado['y_teste'] = y_test\n","df_resultado['y_previsao_rn'] = y_previsao_rn\n","df_resultado = df_resultado.reset_index(drop=True)\n","display(df_resultado)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"zhRpHer1ngzL","executionInfo":{"status":"ok","timestamp":1647987364653,"user_tz":180,"elapsed":10,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"543b269c-76e0-4180-92ac-d73ec8a922ae"},"execution_count":202,"outputs":[{"output_type":"display_data","data":{"text/plain":["    y_teste  y_previsao_rn\n","0         0              0\n","1         0              0\n","2         0              0\n","3         1              0\n","4         1              0\n","..      ...            ...\n","85        1              0\n","86        0              0\n","87        0              0\n","88        0              0\n","89        0              0\n","\n","[90 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-d30933f4-91f2-499c-aa67-b54973c4f0de\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_teste</th>\n","      <th>y_previsao_rn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>90 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d30933f4-91f2-499c-aa67-b54973c4f0de')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d30933f4-91f2-499c-aa67-b54973c4f0de button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d30933f4-91f2-499c-aa67-b54973c4f0de');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","source":["# Avaliando o Random Forest e a Rede Neural"],"metadata":{"id":"NLm7yzqWS9x4"}},{"cell_type":"markdown","source":["Vamos visualizar algumas informações dos modelos, como: Matriz de confusão, Precisão x Recall e a Curva ROC."],"metadata":{"id":"ARw6P5pEUKmS"}},{"cell_type":"markdown","source":["## Matriz de Confusão"],"metadata":{"id":"IZKk_zfVUclu"}},{"cell_type":"markdown","source":["Matriz de confusão é uma tabela que exibe a frequência de classificação para cada classe do modelo.\n","\n","- **Verdadeiro positivo (true positive):** acontece quando no conjunto original, a classe que estamos procurando foi prevista corretamente.\n","- **Falso positivo (false positive):** ocorre quando no conjunto original, a classe buscamos prever foi prevista de forma incorreta.\n","- **Falso verdadeiro (true negative):** ocorre quando no conjunto real, a classe que não estamos buscamos prever foi prevista corretamente.\n","- **Falso negativo (false negative):** acontece quando no conjunto real, a classe que não estamos buscamos prever foi prevista incorretamente.\n"],"metadata":{"id":"3OHorlbQWoMz"}},{"cell_type":"code","source":["cv = StratifiedKFold(n_splits = 5, shuffle = True)\n","\n","modelos = [modelo_rf, modelo_rn]\n","nome_modelos = [\"Random Forest\",\"Rede neural\"]\n","i=0\n","\n","for modelo in modelos:\n","  y_pred = cross_val_predict(modelo, X_train, y_train, cv = cv)\n","  fig, ax = plt.subplots()\n","  sns.heatmap(confusion_matrix(y_train, y_pred), annot=True, \n","              ax=ax, fmt='d', cmap='Reds')\n","  ax.set_title(nome_modelos[i], fontsize=15)\n","  ax.set_ylabel(\"True label\")\n","  ax.set_xlabel(\"Predicted Label\")\n","  plt.tight_layout()\n","  i+=1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"jCKESkWoTDtX","executionInfo":{"status":"ok","timestamp":1647987367608,"user_tz":180,"elapsed":2963,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"f06563fd-a7d8-41f4-b323-0bd4bf0f9bea"},"execution_count":203,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Curva ROC"],"metadata":{"id":"sgTZPQ7Vcn62"}},{"cell_type":"markdown","source":["Essa curva é a representação gráfica do desempenho de qualquer modelo de classificação em todos os limites de calssificação. Existem dois parâmetros desta curva: **Taxa de Verdadeiro Positivo** e **Taxa de Falso Positivo**, que explicamos anteriormente.\n","\n","A eficiência do modelo é determinada pela visualização da área sob a cruva. Assim o modelo mais eficiente possui AUC igual a 1, e o modelo menos eficiente possui AUC igual a 0,5."],"metadata":{"id":"OqnGmmATcswv"}},{"cell_type":"code","source":["y_prob_rf = cross_val_predict(modelo_rf, X_train, y_train, cv = cv, method = 'predict_proba')\n","y_scores_rf = y_prob_rf[:,1]\n","fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_train, y_scores_rf)\n","\n","y_prob_rn = cross_val_predict(modelo_rn, X_train, y_train, cv = cv, method = 'predict_proba')\n","y_scores_rn = y_prob_rn[:,1]\n","fpr_rn, tpr_rn, thresholds_rn = roc_curve(y_train, y_scores_rn)\n","\n","fig, ax = plt.subplots(figsize = (12,4))\n","plt.plot(fpr_rf, tpr_rf, linewidth=2, label = 'Random Forest')\n","plt.plot(fpr_rn, tpr_rn, linewidth=2, label = 'Redes Neurais')\n","plt.plot([0,1], [0,1], 'k--')\n","plt.axis([0, 1, 0, 1])\n","plt.xlabel('Taxa de Falsos Positivos')\n","plt.ylabel('Taxa de Verdadeiros Positivos')\n","plt.legend(loc = 'lower right')\n","plt.title('Curva ROC dos Modelos', fontsize = 14)\n","plt.show()\n","\n","print()\n","print('Área sob a curva ROC - Random Forest: {:.2f}'.format(roc_auc_score(y_train, y_scores_rf)))\n","print('Área sob a curva ROC - Redes Neurais: {:.2f}'.format(roc_auc_score(y_train, y_scores_rn)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":869},"id":"gM8k6UWActRP","executionInfo":{"status":"ok","timestamp":1647987835045,"user_tz":180,"elapsed":2789,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"}},"outputId":"af434fb3-03ea-4e4b-8cf0-aae6968a6a68"},"execution_count":212,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","Área sob a curva ROC - Random Forest: 0.92\n","Área sob a curva ROC - Redes Neurais: 0.50\n"]}]},{"cell_type":"markdown","source":["## Resultados"],"metadata":{"id":"a6MChNb3uxLj"}},{"cell_type":"markdown","source":["Depois de finalizarmos as validações e avaliações dos modelos, podemos concluir que para esse DataSet o uso da Random Forest é melhor do que a Rede Neural. A Random Forest se saiu melhor em todas validações e avaliações que fizemos. Todos os números foram exibidos nas células anteriores.\n"],"metadata":{"id":"oXq_kG6iuzZ2"}},{"cell_type":"markdown","metadata":{"id":"woFKS2vQbj9T"},"source":["# Hiperparâmetros"]},{"cell_type":"markdown","metadata":{"id":"-LEbkDRmbqJg"},"source":["Parâmetros que podem ser usados na Rede Neural"]},{"cell_type":"markdown","metadata":{"id":"_ajgYAANcIXf"},"source":["*   activation: Função de ativação para a camada oculta.\n","  *   identity: ativação sem operação, útil para implementar gargalo linear, retorna f(x) = x;\n","  *   logistic: a função sigmóide logística, retorna f(x) = 1/(1+exp(-x));\n","  *   tanh: a função tan hiérbólica, retorna f(x) = tanh(x);\n","  *   relu: a função de unidade linear retificada, retorna f(x) = max(0, x).\n","\n","*   solver: O solucionador para otimização de peso.\n","  *   lbfgs: é um otimizador na família de métodos quasi_Newton methods;\n","  *   sgd: refere-se à descida de gradiente estocástica;\n","  *   adam: refere-se a um otimizador estocástico baseado em gradiente proposto por Kingma, Diederik e Jimmy Ba.\n","\n","*   learning_rate: Cronograma de taxa de aprendizado para atualizações de peso.\n","  *   constant: é uma taxa de aprendizado constante dada por 'learning_rate_init';\n","  *   invscaling: diminui gradualmente a taxa de aprendizado a cada passo de tempo 't' usando um expoente de escala inversa de 'power_t'. Effective_learning_rate = learning_rate_init / pow(t, power_t);\n","  *   adaptive: mantém a taxa de aprendizado constante para 'learning_rate_init' enquanto a perda de treinamento continua diminuindo. Cada vez que duas épocas consecutivas falham em diminuir a perda de treinamento em pelo menos tol, ou falham em aumentar a pontuação de validação em pelo menos tol se 'early_stopping' estiver ativado, a taxa de aprendizado atual é dividida por 5.\n","\n","*   max_inter: Número máximo de iterações. O solver itera até a convergência (determinada por 'tol') ou este número de iterações. Para solucionadores estocásticos ('sgd', 'adam'), observe que isso determina o número de épocas (quantas vezes cada ponto de dados será usado), não o número de etapas de gradiente.\n","\n"]},{"cell_type":"code","execution_count":205,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1647987370234,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"G2-nPkYJYQvJ"},"outputs":[],"source":["parametros = {\n","  \"activation\" : [\"identity\", \"logistic\", \"tanh\", \"relu\"],\n","  \"solver\" : [\"lbfgs\", \"sgd\", \"adam\"],\n","  \"learning_rate\" : [\"constant\", \"invscaling\", \"adaptive\"],\n","  \"max_iter\" : [10, 20, 30]\n","}"]},{"cell_type":"markdown","metadata":{"id":"y8gkeSfrgQhD"},"source":["Depois de definir os valores e hiperparâmetros, vamos explora-lós utilizando o GridSearchCV."]},{"cell_type":"code","execution_count":206,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18876,"status":"ok","timestamp":1647987389096,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"cPxt199LY-g4","outputId":"471ffc42-1e2e-436c-ded0-53aee0c73c44"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:549: ConvergenceWarning: lbfgs failed to converge (status=2):\n","ABNORMAL_TERMINATION_IN_LNSRCH.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","  self.n_iter_ = _check_optimize_result(\"lbfgs\", opt_res, self.max_iter)\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (30) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n"]}],"source":["clf_grid = GridSearchCV(modelo_rn, parametros, cv=5)\n","search = clf_grid.fit(X_train, y_train)\n","results_GridSearchCV = search.cv_results_\n","indice_melhores_parametros = search.best_index_"]},{"cell_type":"markdown","metadata":{"id":"U_slA40hgxGT"},"source":["Agora podemos recuperar os parâmetros que obtiveram melhor desempenho."]},{"cell_type":"code","execution_count":207,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":60,"status":"ok","timestamp":1647987389098,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"rgvukJQ8aI7Q","outputId":"28d0631b-fb1b-4213-d84c-3b6279333435"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'activation': 'identity', 'learning_rate': 'invscaling', 'max_iter': 30, 'solver': 'adam'}\n"]}],"source":["print(results_GridSearchCV['params'][indice_melhores_parametros])"]},{"cell_type":"markdown","metadata":{"id":"4Yp4HS2RhZwu"},"source":["Com isso, conseguimos descobrir o melhor modelo dentre o grupo de parâmetros que definimos."]},{"cell_type":"markdown","metadata":{"id":"opFFstmncnNK"},"source":["# Mean Squad Error"]},{"cell_type":"markdown","metadata":{"id":"5eSAPQwDAeW6"},"source":["O MSE mede a média do erro dos quadrados, ou seja, a diferença quadrada média entre os valores estimados e os valores reais. É elevado ao quadrado para que poss remover os sinais negativos e dar maior peso para os grandes erros. A reta que possuir o melhor ajuste possível é a que vai nos fornercer o menor erro quadrático.\n","\n","\n","$MSE = 1/n {\\sum_{i=1}^{n}} (\\hat{y}_i-y_i)^2$"]},{"cell_type":"markdown","metadata":{"id":"RkbbJ5_iBy-Y"},"source":["MSE do Random Forest"]},{"cell_type":"code","execution_count":208,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":57,"status":"ok","timestamp":1647987389103,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"hpQzmVoBf6tX","outputId":"baa93183-feb0-49d4-9d3e-51d76e80dc14"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.2111111111111111"]},"metadata":{},"execution_count":208}],"source":["MSE = mean_squared_error(y_test,y_previsao_rf)\n","MSE"]},{"cell_type":"markdown","metadata":{"id":"n1SqwHa7B4pC"},"source":["MSE da Rede Neural"]},{"cell_type":"code","execution_count":209,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":49,"status":"ok","timestamp":1647987389105,"user":{"displayName":"Marcelo Alves da Silva Filho","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06920882857458085117"},"user_tz":180},"id":"N10YdV7cH0Sv","outputId":"784feba9-2730-414c-9d47-2edb3c804df6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.34444444444444444"]},"metadata":{},"execution_count":209}],"source":["MSE = mean_squared_error(y_test,y_previsao_rn)\n","MSE"]},{"cell_type":"markdown","source":["Podemos observar que a Rede Neural possui um MSE maior do que o modelo de Random Forest."],"metadata":{"id":"HWUhf2Y3U1am"}}],"metadata":{"colab":{"collapsed_sections":["GTPAQ_Vu_wYi","eea6EY3HksWg","LUDgWBb2rDCY","rQKrMSGAtyyI","T9hlxvDePe3Q"],"name":"Projeto - Predição de mortalidade causada por insuficiência cardíaca","provenance":[],"authorship_tag":"ABX9TyOjsoe90pp8y3TOuvc1kDLg"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}